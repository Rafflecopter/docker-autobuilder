daemon off;
worker_processes  1;
events {
    worker_connections 1024;
}

http {
    access_log /dev/stdout;
    error_log /dev/stderr;

    lua_package_path "${prefix}repos/?.lua;${prefix}conf/?.lua;;";

    server {
        listen 80;
        server_name docker_autobuilder;

        location / {
            limit_except POST {
                deny all;
            }

            content_by_lua '
                local cjson = require("cjson");
                local shell = require("shell");
                local imagemap = require("repos");

                function os.capture(cmd, raw)
                  local f = assert(io.popen(cmd, "r"))
                  local s = assert(f:read("*all"))
                  f:close()
                  return s
                end

                function psay(s)
                    print(s)
                    ngx.say(s)
                end

                ngx.req.read_body();
                local body = cjson.decode(ngx.req.get_body_data());

                local repo = body.repository.full_name;

                if not imagemap[repo] then
                    ngx.exit(404)
                end

                local image = imagemap[repo];
                local tag = string.match(body.ref, "/([^/]*)$");
                local full_image = image .. ":" .. tag;
                local full_repo = repo .. "#" .. tag;

                local status, out, err = shell.execute("/app/bin/build.sh " .. full_repo .. " " .. full_image, {timeout = 300000})
                ngx.header.content_type = "text/plain"
                if status then
                    ngx.status = 500
                else
                    ngx.status = 200
                end
                ngx.say(out)
                ngx.say(err)
            ';
        }
    }
}